---
to: ios/fastlane/Fastfile
---

default_platform(:ios)

platform :ios do
<% if (circleci || carthage || cocoapods) { -%>
  before_all do
<% if (circleci) { -%>
    ########################
    # Setup CircleCI
    ########################
    setup_circle_ci
    
    ########################
    # Set Xcode Version
    ########################
    xcversion(version: "10.1")
<% } -%>
<% if (carthage)  { %>
    ########################
    # Setup Carthage
    ########################
    carthage(
      command: "bootstrap",
      use_binaries: false,
      cache_builds: true,
      platform: "iOS"
    )
<% } -%>
<% if (cocoapods) { %>
    ########################
    # Setup Cocoapods
    ########################
    cocoapods
<% } -%>
  end
<% } -%>

  ########################################################################
  # Adhoc Lane
  ########################################################################
  desc "Ad-hoc build"
  lane :adhoc do |options|
    ########################
    # Pull certs & profiles
    ########################
    sync_code_signing(type: "appstore")
    sync_code_signing(type: "adhoc", force_for_new_devices: true)

    ########################
    # Build the app
    ########################
    increment_build_number(build_number: options[:build_number])

    # Make sure and set either GYM_WORKSPACE or GYM_PROJECT and GYM_SCHEME
    build_ios_app(
      export_method: "ad-hoc",
      include_bitcode: true,
      skip_profile_detection: true
    )

    ########################
    # Upload to App Center
    ########################
    distribute = options[:distribute].to_s != 'false'

    if distribute
      appcenter_upload(
        ipa: "./#{ENV['GYM_OUTPUT_NAME']}.ipa",
        dsym: "./#{ENV['GYM_OUTPUT_NAME']}.app.dSYM.zip"
      )
      
      group = ENV['APPCENTER_DISTRIBUTE_GROUP'] || 'Collaborators'
      echo(message: "Successfully distributed *iOS* build *#{options[:build_number]}* to the *#{group}* group on App Center")
    end
  end

  ########################################################################
  # Beta Lane
  ########################################################################
  desc "Beta build"
  lane :beta do |options|
    ########################
    # Pull certs & profiles
    ########################
    sync_code_signing(type: "appstore")

    ########################
    # Build the app
    ########################
    increment_build_number(build_number: options[:build_number])

    # Make sure and set either GYM_WORKSPACE or GYM_PROJECT and GYM_SCHEME
    build_ios_app(
      export_method: "app-store",
      include_bitcode: true,
      skip_profile_detection: true
    )

    ########################
    # Upload to TestFlight
    ########################
    upload_to_testflight
  end


  desc "Production build"
  lane :production do |options|
    ########################
    # Pull certs & profiles
    ########################
    sync_code_signing(type: "appstore")

    ########################
    # Build the app
    ########################
    increment_build_number(build_number: options[:build_number])

    # Make sure and set either GYM_WORKSPACE or GYM_PROJECT and GYM_SCHEME
    build_ios_app(
      export_method: "app-store",
      include_bitcode: true,
      skip_profile_detection: true
    )

    ########################
    # Upload to AppStore Connect
    ########################
    upload_to_app_store(
      force: true,
      submit_for_review: false,
      automatic_release: false
    )
  end

  error do |lane, exception|
    echo(message: exception.message)
  end
end
